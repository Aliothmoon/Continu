// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Aliothmoon/Continu/internal/repo/model"
)

func newBuildRecord(db *gorm.DB, opts ...gen.DOOption) buildRecord {
	_buildRecord := buildRecord{}

	_buildRecord.buildRecordDo.UseDB(db, opts...)
	_buildRecord.buildRecordDo.UseModel(&model.BuildRecord{})

	tableName := _buildRecord.buildRecordDo.TableName()
	_buildRecord.ALL = field.NewAsterisk(tableName)
	_buildRecord.ID = field.NewInt32(tableName, "id")
	_buildRecord.Pid = field.NewInt32(tableName, "pid")
	_buildRecord.Status = field.NewInt32(tableName, "status")
	_buildRecord.Bin = field.NewString(tableName, "bin")
	_buildRecord.Parameters = field.NewString(tableName, "parameters")
	_buildRecord.WorkDir = field.NewString(tableName, "work_dir")
	_buildRecord.CreatedAt = field.NewInt64(tableName, "created_at")

	_buildRecord.fillFieldMap()

	return _buildRecord
}

type buildRecord struct {
	buildRecordDo

	ALL        field.Asterisk
	ID         field.Int32
	Pid        field.Int32
	Status     field.Int32
	Bin        field.String
	Parameters field.String
	WorkDir    field.String
	CreatedAt  field.Int64

	fieldMap map[string]field.Expr
}

func (b buildRecord) Table(newTableName string) *buildRecord {
	b.buildRecordDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b buildRecord) As(alias string) *buildRecord {
	b.buildRecordDo.DO = *(b.buildRecordDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *buildRecord) updateTableName(table string) *buildRecord {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt32(table, "id")
	b.Pid = field.NewInt32(table, "pid")
	b.Status = field.NewInt32(table, "status")
	b.Bin = field.NewString(table, "bin")
	b.Parameters = field.NewString(table, "parameters")
	b.WorkDir = field.NewString(table, "work_dir")
	b.CreatedAt = field.NewInt64(table, "created_at")

	b.fillFieldMap()

	return b
}

func (b *buildRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *buildRecord) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 7)
	b.fieldMap["id"] = b.ID
	b.fieldMap["pid"] = b.Pid
	b.fieldMap["status"] = b.Status
	b.fieldMap["bin"] = b.Bin
	b.fieldMap["parameters"] = b.Parameters
	b.fieldMap["work_dir"] = b.WorkDir
	b.fieldMap["created_at"] = b.CreatedAt
}

func (b buildRecord) clone(db *gorm.DB) buildRecord {
	b.buildRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b buildRecord) replaceDB(db *gorm.DB) buildRecord {
	b.buildRecordDo.ReplaceDB(db)
	return b
}

type buildRecordDo struct{ gen.DO }

type IBuildRecordDo interface {
	gen.SubQuery
	Debug() IBuildRecordDo
	WithContext(ctx context.Context) IBuildRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBuildRecordDo
	WriteDB() IBuildRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBuildRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBuildRecordDo
	Not(conds ...gen.Condition) IBuildRecordDo
	Or(conds ...gen.Condition) IBuildRecordDo
	Select(conds ...field.Expr) IBuildRecordDo
	Where(conds ...gen.Condition) IBuildRecordDo
	Order(conds ...field.Expr) IBuildRecordDo
	Distinct(cols ...field.Expr) IBuildRecordDo
	Omit(cols ...field.Expr) IBuildRecordDo
	Join(table schema.Tabler, on ...field.Expr) IBuildRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBuildRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBuildRecordDo
	Group(cols ...field.Expr) IBuildRecordDo
	Having(conds ...gen.Condition) IBuildRecordDo
	Limit(limit int) IBuildRecordDo
	Offset(offset int) IBuildRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBuildRecordDo
	Unscoped() IBuildRecordDo
	Create(values ...*model.BuildRecord) error
	CreateInBatches(values []*model.BuildRecord, batchSize int) error
	Save(values ...*model.BuildRecord) error
	First() (*model.BuildRecord, error)
	Take() (*model.BuildRecord, error)
	Last() (*model.BuildRecord, error)
	Find() ([]*model.BuildRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BuildRecord, err error)
	FindInBatches(result *[]*model.BuildRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BuildRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBuildRecordDo
	Assign(attrs ...field.AssignExpr) IBuildRecordDo
	Joins(fields ...field.RelationField) IBuildRecordDo
	Preload(fields ...field.RelationField) IBuildRecordDo
	FirstOrInit() (*model.BuildRecord, error)
	FirstOrCreate() (*model.BuildRecord, error)
	FindByPage(offset int, limit int) (result []*model.BuildRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBuildRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b buildRecordDo) Debug() IBuildRecordDo {
	return b.withDO(b.DO.Debug())
}

func (b buildRecordDo) WithContext(ctx context.Context) IBuildRecordDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b buildRecordDo) ReadDB() IBuildRecordDo {
	return b.Clauses(dbresolver.Read)
}

func (b buildRecordDo) WriteDB() IBuildRecordDo {
	return b.Clauses(dbresolver.Write)
}

func (b buildRecordDo) Session(config *gorm.Session) IBuildRecordDo {
	return b.withDO(b.DO.Session(config))
}

func (b buildRecordDo) Clauses(conds ...clause.Expression) IBuildRecordDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b buildRecordDo) Returning(value interface{}, columns ...string) IBuildRecordDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b buildRecordDo) Not(conds ...gen.Condition) IBuildRecordDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b buildRecordDo) Or(conds ...gen.Condition) IBuildRecordDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b buildRecordDo) Select(conds ...field.Expr) IBuildRecordDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b buildRecordDo) Where(conds ...gen.Condition) IBuildRecordDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b buildRecordDo) Order(conds ...field.Expr) IBuildRecordDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b buildRecordDo) Distinct(cols ...field.Expr) IBuildRecordDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b buildRecordDo) Omit(cols ...field.Expr) IBuildRecordDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b buildRecordDo) Join(table schema.Tabler, on ...field.Expr) IBuildRecordDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b buildRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBuildRecordDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b buildRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IBuildRecordDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b buildRecordDo) Group(cols ...field.Expr) IBuildRecordDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b buildRecordDo) Having(conds ...gen.Condition) IBuildRecordDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b buildRecordDo) Limit(limit int) IBuildRecordDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b buildRecordDo) Offset(offset int) IBuildRecordDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b buildRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBuildRecordDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b buildRecordDo) Unscoped() IBuildRecordDo {
	return b.withDO(b.DO.Unscoped())
}

func (b buildRecordDo) Create(values ...*model.BuildRecord) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b buildRecordDo) CreateInBatches(values []*model.BuildRecord, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b buildRecordDo) Save(values ...*model.BuildRecord) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b buildRecordDo) First() (*model.BuildRecord, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuildRecord), nil
	}
}

func (b buildRecordDo) Take() (*model.BuildRecord, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuildRecord), nil
	}
}

func (b buildRecordDo) Last() (*model.BuildRecord, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuildRecord), nil
	}
}

func (b buildRecordDo) Find() ([]*model.BuildRecord, error) {
	result, err := b.DO.Find()
	return result.([]*model.BuildRecord), err
}

func (b buildRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BuildRecord, err error) {
	buf := make([]*model.BuildRecord, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b buildRecordDo) FindInBatches(result *[]*model.BuildRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b buildRecordDo) Attrs(attrs ...field.AssignExpr) IBuildRecordDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b buildRecordDo) Assign(attrs ...field.AssignExpr) IBuildRecordDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b buildRecordDo) Joins(fields ...field.RelationField) IBuildRecordDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b buildRecordDo) Preload(fields ...field.RelationField) IBuildRecordDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b buildRecordDo) FirstOrInit() (*model.BuildRecord, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuildRecord), nil
	}
}

func (b buildRecordDo) FirstOrCreate() (*model.BuildRecord, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuildRecord), nil
	}
}

func (b buildRecordDo) FindByPage(offset int, limit int) (result []*model.BuildRecord, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b buildRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b buildRecordDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b buildRecordDo) Delete(models ...*model.BuildRecord) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *buildRecordDo) withDO(do gen.Dao) *buildRecordDo {
	b.DO = *do.(*gen.DO)
	return b
}
